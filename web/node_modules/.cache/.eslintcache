[{"/Users/johngeliberte/Work/LinTech Tracker/web/src/index.js":"1","/Users/johngeliberte/Work/LinTech Tracker/web/src/App.js":"2","/Users/johngeliberte/Work/LinTech Tracker/web/src/reportWebVitals.js":"3","/Users/johngeliberte/Work/LinTech Tracker/web/src/Header.js":"4","/Users/johngeliberte/Work/LinTech Tracker/web/src/Files.js":"5","/Users/johngeliberte/Work/LinTech Tracker/web/src/Overview.js":"6","/Users/johngeliberte/Work/LinTech Tracker/web/src/Calendar.js":"7","/Users/johngeliberte/Work/LinTech Tracker/web/src/Login.js":"8"},{"size":535,"mtime":1673609592308,"results":"9","hashOfConfig":"10"},{"size":1425,"mtime":1673717659737,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1673609592310,"results":"12","hashOfConfig":"10"},{"size":5671,"mtime":1673793298174,"results":"13","hashOfConfig":"10"},{"size":364,"mtime":1673617558356,"results":"14","hashOfConfig":"10"},{"size":21039,"mtime":1673856836107,"results":"15","hashOfConfig":"10"},{"size":373,"mtime":1673617561661,"results":"16","hashOfConfig":"10"},{"size":6169,"mtime":1673856856794,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"dtj8c8",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/johngeliberte/Work/LinTech Tracker/web/src/index.js",[],[],[],"/Users/johngeliberte/Work/LinTech Tracker/web/src/App.js",["46","47","48","49"],[],"import '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\nimport { useState, useEffect, Fragment } from 'react';\nimport Header from './Header';\nimport Overview from './Overview';\nimport Files from './Files';\nimport Calendar from './Calendar';\nimport Login from './Login';\n\nconst PageSwitcher = ({index, setSwitcher}) => {\n  let component = null;\n  switch(index) {\n    case 0:\n      component = <Login setSwitcher={setSwitcher}/>\n      break;\n    case 1:\n      component = <Overview />;\n      break;\n    case 2:\n      component = <Files />;\n      break;\n    case 3:\n      component = <Calendar />;\n      break;\n    default:\n      component = <Login setSwitcher={setSwitcher}/>;\n  }\n  return component;\n}\n\nconst App = () => {\n  const [pageSwitcher, setSwitcher] = useState(0);\n  const [currentPageIndex, setCurrentPageIndex] = useState(0);\n\n  useEffect(()=> {\n    if (currentPageIndex != pageSwitcher) {\n      setCurrentPageIndex(pageSwitcher)\n    }\n  }, [pageSwitcher]);\n\n  useEffect(()=> {\n    let credentials = localStorage.getItem('credentials');\n    if (credentials != null) {\n      setSwitcher(1);\n    }\n  }, []);\n\n  return(\n    <div>\n      {\n        currentPageIndex != 0 && <Header setSwitcher={setSwitcher}/>\n      }\n      <PageSwitcher index={currentPageIndex} setSwitcher={setSwitcher}/>\n    </div>\n  )\n}\n\nexport default App;","/Users/johngeliberte/Work/LinTech Tracker/web/src/reportWebVitals.js",[],[],"/Users/johngeliberte/Work/LinTech Tracker/web/src/Header.js",[],[],"/Users/johngeliberte/Work/LinTech Tracker/web/src/Files.js",[],[],"/Users/johngeliberte/Work/LinTech Tracker/web/src/Overview.js",["50","51","52","53","54","55","56","57","58","59","60","61","62","63","64"],[],"import { Fragment, useCallback, useEffect, useState } from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Input from '@mui/material/Input';\nimport FormControl from '@mui/material/FormControl';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport SearchIcon from '@mui/icons-material/Search';\nimport Box from '@mui/material/Box';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nimport Fab from '@mui/material/Fab';\nimport Zoom from '@mui/material/Zoom';\n\n\nimport { styled } from '@mui/material/styles';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\n\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport AssessmentIcon from '@mui/icons-material/Assessment';\nimport PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';\nimport PauseCircleOutlineIcon from '@mui/icons-material/PauseCircleOutline';\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport SummarizeIcon from '@mui/icons-material/Summarize';\n\nimport { KeyboardArrowUp } from \"@mui/icons-material\";\nimport useScrollTrigger from \"@mui/material/useScrollTrigger\";\nimport Chip from '@mui/material/Chip';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport axios from 'axios';\nimport Swal from 'sweetalert2'\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuiDialogContent-root': {\n      padding: theme.spacing(2),\n    },\n    '& .MuiDialogActions-root': {\n      padding: theme.spacing(1),\n    },\n  }));\n  \n  export interface DialogTitleProps {\n    id: string;\n    children?: React.ReactNode;\n    onClose: () => void;\n}\nconst IP_ADDR = \"http://192.168.150.108:6969\";\n\nfunction BootstrapDialogTitle(props: DialogTitleProps) {\n    const { children, onClose, ...other } = props;\n    return (\n      <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n        {children}\n        {onClose ? (\n          <IconButton\n            aria-label=\"close\"\n            onClick={onClose}\n            sx={{\n              position: 'absolute',\n              right: 8,\n              top: 8,\n              color: (theme) => theme.palette.grey[500],\n            }}\n          >\n            <CloseIcon />\n          </IconButton>\n        ) : null}\n      </DialogTitle>\n    );\n  }\n  \n\nconst Overview = () => {\n    const [open, setOpen] = useState(false);\n    const [asssignedTo, setAssignedTo] = useState([]);\n    const [majorOutputList, setOutputList] = useState([]);\n    const [currentTaskList, setTaskList] = useState([]);\n    const [memberList, setMemberList] = useState([]);\n    \n    const [selectedMajorOutput, setSelectedMajorOutput] = useState(null);\n    const [selectedMajorOutputValue, setSelectedMajorOutputValue] = useState('');\n    const [assignedMemberValue, setAssignedMemberValue] =  useState('');\n    const [outputDetails, setOutputDetails] = useState('');\n    const [outputNotes, setOutputNotes] = useState('');\n    const [runningTimerList, setRunningTimerList] = useState([]);\n\n    const handleClickOpen = () => {\n      setOpen(true);\n    };\n    const handleClose = () => {\n      setOpen(false);\n    };\n\n    const resetForm = () => {\n        setAssignedTo([]);\n        setOutputDetails('');\n        setOutputNotes('');\n        setSelectedMajorOutput(null);\n    }\n\n    const handleSave = () => {\n        axios.post(`${IP_ADDR}/save_task`, {\n            major_output: selectedMajorOutput,\n            output_details: outputDetails,\n            assigned_to: asssignedTo,\n            output_notes: outputNotes,\n            user_id: JSON.parse(localStorage.getItem('credentials'))['credentials']['user_id']\n        })\n        .then(function (response) {\n            if (response.data.status == true) {\n                handleClose();\n                let timerInterval;\n                Swal.fire({\n                    icon: 'success',\n                    title: 'Task Saved Successfully!',\n                    text: response.data.message,\n                    footer: '<div />',\n                    timer: 2000,\n                    timerProgressBar: true,\n                    didOpen: () => {\n                        Swal.showLoading()\n                        const b = Swal.getHtmlContainer().querySelector('b')\n                        timerInterval = setInterval(() => {\n                        b.textContent = Swal.getTimerLeft()\n                        }, 100)\n                    },\n                    willClose: () => {\n                        clearInterval(timerInterval)\n                    },\n                    showConfirmButton: false \n                }).then(()=> {\n                    resetForm();\n                    getTasks();\n                });\n            } else {\n                Swal.fire({\n                    icon: 'error',\n                    title: 'Oops...',\n                    text: response.data.message,\n                });\n            }\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n    }\n    \n    const trigger = useScrollTrigger({\n        target: document.body,\n        disableHysteresis: true,\n        threshold: 100,\n    });\n\n    const scrollToTop = useCallback(() => {\n        document.body.scrollTo({ top: 0, behavior: \"smooth\" });\n    }, []);\n\n    const getTasks = () => {\n        let user_id = JSON.parse(localStorage.getItem('credentials'))['credentials']['user_id'];\n        axios.get(`${IP_ADDR}/get_tasks/${user_id}`)\n        .then(function (response) {\n            setTaskList(response.data.data)\n          })\n          .catch(function (error) {\n            // handle error\n            console.log(error);\n          })\n          .then(function () {\n            // \n          });\n    }\n\n    const getMajorOutputList = () => {\n        axios.get(`${IP_ADDR}/get_major_outputs`)\n        .then(function (response) {\n            setOutputList(response.data.data)\n          })\n          .catch(function (error) {\n            // handle error\n            console.log(error);\n          })\n          .then(function () {\n            // \n          });\n    }\n\n    const getUsers = () => {\n        axios.get(`${IP_ADDR}/get_users`)\n        .then(function (response) {\n            setMemberList(response.data.data)\n          })\n          .catch(function (error) {\n            // handle error\n            console.log(error);\n          })\n          .then(function () {\n            // \n          });\n    }\n\n    const toggleTimer = (id) => {\n        let temp = [...runningTimerList];\n        let index = runningTimerList.indexOf(id);\n        if (index == -1) {\n            axios.post(`${IP_ADDR}/start_timer`, {output_id: id})\n            .then(function (response) {\n                if (response.data.status == true) {\n                    temp.push(id)\n                    setRunningTimerList(temp)\n                } else {\n                    \n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n        } else {\n            axios.post('${IP_ADDR}/stop_timer', {output_id: id})\n            .then(function (response) {\n                if (response.data.status == true) {\n                    temp.splice(index, 1);\n                    setRunningTimerList(temp)\n                } else {\n                    \n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n\n        }\n    }\n\n    const TimerButtons = ({task}) => {\n        return (\n            <Button startIcon={<PlayCircleOutlineIcon/>} onClick={(e)=> {e.preventDefault(); toggleTimer(task);}}>Start timer</Button>\n        )\n    }\n\n    useEffect(()=> {\n        getTasks();\n        getMajorOutputList();\n        getUsers();\n    }, []);\n\n    return (\n        <Fragment>\n            <CssBaseline />\n            <Container maxWidth=\"lg\">\n                <Grid container>\n                    <Grid item xs={7} />\n                    <Grid item xs={5}>\n                        <FormControl variant=\"standard\" sx={{ mb: 1, mt: 6, width: '100%', minWidth: '5ch' }}>\n                            <Input\n                                id=\"standard-adornment-search\"\n                                endAdornment={<SearchIcon position=\"end\"></SearchIcon>}\n                                aria-describedby=\"standard-search-helper-text\"\n                                inputProps={{\n                                'aria-label': 'Search',\n                                }}\n                            />\n                            <FormHelperText id=\"standard-search-helper-text\">Search Tasks / Outputs / Date</FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography variant=\"h4\" style={{fontWeight: 500}}>List of tasks</Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <ButtonGroup variant=\"text\" aria-label=\"text button group\">\n                            <Button startIcon={<AddCircleOutlineIcon />} onClick={handleClickOpen}>Create a task</Button>\n                            <Button startIcon={<AssessmentIcon />}>Generate latest RACI</Button>\n                            <Button startIcon={<SummarizeIcon />}>Generate Monthly Accomplishment Report</Button>\n                        </ButtonGroup>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box sx={{ p: 2, mt: 2, mb: 2, \n                            boxShadow: 1, \n                            borderRadius: 2,\n                            backgroundColor: 'grey',\n                            minHeight: 400}}>\n                            {\n                                currentTaskList.length != 0 ?\n                                    currentTaskList.map((element)=> (\n                                        <Accordion>\n                                            <AccordionSummary\n                                            expandIcon={<ExpandMoreIcon />}\n                                            aria-controls=\"panel1a-content\"\n                                            id=\"panel1a-header\"\n                                            >\n                                                <Grid container>\n                                                    <Grid item xs={7}>\n                                                        <Typography style={{fontWeight: 500}}>{element.major_output}</Typography>\n                                                        <Typography variant=\"overline\">{element.actual_outputs}</Typography>\n                                                    </Grid>\n                                                    <Grid item xs={5}>\n                                                        <Grid container sx={{textAlign: 'right', pt: 1}} justifyContent=\"flex-end\">\n                                                            <Grid item xs={4}>\n                                                                <Button color={runningTimerList.indexOf(element.output_id) == -1 ? \"primary\" : \"error\"} startIcon={runningTimerList.indexOf(element.output_id) == -1 ? <PlayCircleOutlineIcon/> : <PauseCircleOutlineIcon />} onClick={()=> toggleTimer(element.output_id)}>\n                                                                    {\n                                                                        runningTimerList.indexOf(element.output_id) == -1 ? \"Start Timer\" : \"Stop Timer\"\n                                                                    }\n                                                                </Button>\n                                                            </Grid>\n                                                            <Grid item xs={4}>\n                                                                <Button startIcon={<CheckCircleOutlineIcon/>} color=\"success\">Mark as done</Button>\n                                                            </Grid>\n                                                        </Grid>\n                                                    </Grid>\n                                                </Grid>\n                                            </AccordionSummary>\n                                            <AccordionDetails>\n                                            <Typography>\n                                                {\n                                                    element.details != \"\" && element.details != null ? \n                                                        element.details\n                                                    :\n                                                        <Typography>\n                                                            <Box sx={{ fontStyle: 'italic', m: 1 }}>Wala kang nilagay na details. Kasalanan mo kung bakit ka nalilito kung ano tong task na to.</Box>\n                                                        </Typography>\n                                                }\n                                            </Typography>\n                                            </AccordionDetails>\n                                        </Accordion>\n                                    ))\n                                :\n                                    <Typography sx={{p: 2, color: 'white', textAlign: 'center'}}>\n                                        No task(s) available 🥬 \n                                    </Typography>\n                            }\n                        </Box>\n                    </Grid>\n                </Grid>\n            </Container>\n            <Zoom in={trigger}>\n                <Box\n                role=\"presentation\"\n                sx={{\n                    position: \"fixed\",\n                    bottom: 32,\n                    right: 32,\n                    zIndex: 1,\n                }}\n                >\n                <Fab\n                    onClick={scrollToTop}\n                    color=\"primary\"\n                    size=\"small\"\n                    aria-label=\"scroll back to top\"\n                >\n                    <KeyboardArrowUp />\n                </Fab>\n                </Box>\n            </Zoom>\n            <BootstrapDialog\n                onClose={handleClose}\n                aria-labelledby=\"customized-dialog-title\"\n                open={open}\n            >\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                    Create a task\n                </BootstrapDialogTitle>\n                <DialogContent dividers>\n                    <Container maxWidth=\"lg\">\n                        <Grid container spacing={2} sx={{minWidth: 200, maxWidth: 500, width: 500}}>\n                            <Grid item xs={12}>\n                                <Autocomplete\n                                    id=\"output-autocomplete\"\n                                    freeSolo\n                                    options={majorOutputList.map((option) => option.major_output)}\n                                    renderInput={(params) => <TextField {...params} label=\"Task / Output\" />}\n                                    sx={{width: '100%'}}\n                                    helperText=\"E.g. 2.2.1 EWS-L Monitoring Tools Maintenance\"\n                                    variant=\"outlined\" \n                                    value={selectedMajorOutputValue}\n                                    onChange={(event: any, newValue: string | null) => {\n                                        if (newValue != null) {\n                                         let output = majorOutputList.find(x => x.major_output === newValue);\n                                         setSelectedMajorOutput(output)\n                                        }\n                                     }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Autocomplete\n                                    disablePortal\n                                    id=\"member-list-combo\"\n                                    options={memberList.map((option) => option.fullname)}\n                                    sx={{ width: '100%' }}\n                                    renderInput={(params) => <TextField {...params} label=\"Search user(s)\" />}\n                                    label=\"Assign it to\"\n                                    helperText=\"Sino my kasalanan pag di nagawa ang task\"\n                                    variant=\"outlined\"\n                                    value={assignedMemberValue}\n                                    onChange={(event: any, newValue: string | null) => {\n                                       if (newValue != null) {\n                                        let member = memberList.find(x => x.fullname === newValue);\n                                        let temp = [...asssignedTo]\n                                        if (temp.indexOf(member) == -1) {\n                                            temp.push(member)\n                                            setAssignedTo(temp);\n                                        }\n                                       }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                {\n                                    asssignedTo.length == 0 ?\n                                        <Typography sx={{p: 2}}>\n                                            No assigned person(s) yet\n                                        </Typography>\n                                    :\n                                        <div>\n                                            <Typography sx={{p: 2}}>\n                                                Assigned to: \n                                            </Typography>\n                                           {\n                                             asssignedTo.map((el)=> (\n                                                <Chip label={el.fullname} onDelete={()=> {}} />\n                                            ))\n                                           }\n                                        </div>\n                                }\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    sx={{width: '100%'}}\n                                    id=\"filled-helperText\"\n                                    label=\"Output Title\"\n                                    defaultValue=\"\"\n                                    helperText=\"Title ng output (Sa tagalog, Kung ano tawag sa ginagawa mo)\"\n                                    variant=\"outlined\"\n                                    value={outputDetails}\n                                    onChange={(e) => setOutputDetails(e.target.value)}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    sx={{width: '100%'}}\n                                    id=\"filled-helperText\"\n                                    label=\"Output details\"\n                                    defaultValue=\"\"\n                                    multiline\n                                    rows={5}\n                                    helperText=\"Details ng output ilagay mo dito. Bawal blanko.\"\n                                    variant=\"outlined\"\n                                    value={outputNotes}\n                                    onChange={(e) => setOutputNotes(e.target.value)}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Container>\n                </DialogContent>\n                <DialogActions>\n                <Button autoFocus color=\"error\" onClick={() => {\n                    console.log(\"RESET\")\n                }}>\n                    Reset form\n                </Button>\n                <Button autoFocus onClick={handleSave}>\n                    Save changes\n                </Button>\n                </DialogActions>\n            </BootstrapDialog>\n        </Fragment>\n    )\n}\n\nexport default Overview;",[],"/Users/johngeliberte/Work/LinTech Tracker/web/src/Calendar.js",[],[],"/Users/johngeliberte/Work/LinTech Tracker/web/src/Login.js",["65","66"],[],{"ruleId":"67","severity":1,"message":"68","line":6,"column":31,"nodeType":"69","messageId":"70","endLine":6,"endColumn":39},{"ruleId":"71","severity":1,"message":"72","line":39,"column":26,"nodeType":"73","messageId":"74","endLine":39,"endColumn":28},{"ruleId":"75","severity":1,"message":"76","line":42,"column":6,"nodeType":"77","endLine":42,"endColumn":20,"suggestions":"78"},{"ruleId":"71","severity":1,"message":"72","line":54,"column":26,"nodeType":"73","messageId":"74","endLine":54,"endColumn":28},{"ruleId":"67","severity":1,"message":"79","line":93,"column":38,"nodeType":"69","messageId":"70","endLine":93,"endColumn":65},{"ruleId":"67","severity":1,"message":"80","line":94,"column":33,"nodeType":"69","messageId":"70","endLine":94,"endColumn":55},{"ruleId":"71","severity":1,"message":"81","line":122,"column":38,"nodeType":"73","messageId":"74","endLine":122,"endColumn":40},{"ruleId":"71","severity":1,"message":"81","line":216,"column":19,"nodeType":"73","messageId":"74","endLine":216,"endColumn":21},{"ruleId":"71","severity":1,"message":"81","line":219,"column":42,"nodeType":"73","messageId":"74","endLine":219,"endColumn":44},{"ruleId":"82","severity":1,"message":"83","line":230,"column":24,"nodeType":"84","messageId":"85","endLine":230,"endColumn":47},{"ruleId":"71","severity":1,"message":"81","line":232,"column":42,"nodeType":"73","messageId":"74","endLine":232,"endColumn":44},{"ruleId":"67","severity":1,"message":"86","line":246,"column":11,"nodeType":"69","messageId":"70","endLine":246,"endColumn":23},{"ruleId":"71","severity":1,"message":"72","line":294,"column":56,"nodeType":"73","messageId":"74","endLine":294,"endColumn":58},{"ruleId":"71","severity":1,"message":"81","line":310,"column":124,"nodeType":"73","messageId":"74","endLine":310,"endColumn":126},{"ruleId":"71","severity":1,"message":"81","line":310,"column":208,"nodeType":"73","messageId":"74","endLine":310,"endColumn":210},{"ruleId":"71","severity":1,"message":"81","line":312,"column":117,"nodeType":"73","messageId":"74","endLine":312,"endColumn":119},{"ruleId":"71","severity":1,"message":"72","line":326,"column":69,"nodeType":"73","messageId":"74","endLine":326,"endColumn":71},{"ruleId":"71","severity":1,"message":"81","line":410,"column":66,"nodeType":"73","messageId":"74","endLine":410,"endColumn":68},{"ruleId":"71","severity":1,"message":"81","line":420,"column":56,"nodeType":"73","messageId":"74","endLine":420,"endColumn":58},{"ruleId":"67","severity":1,"message":"87","line":1,"column":10,"nodeType":"69","messageId":"70","endLine":1,"endColumn":19},{"ruleId":"71","severity":1,"message":"81","line":28,"column":38,"nodeType":"73","messageId":"74","endLine":28,"endColumn":40},"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentPageIndex'. Either include it or remove the dependency array.","ArrayExpression",["88"],"'setSelectedMajorOutputValue' is assigned a value but never used.","'setAssignedMemberValue' is assigned a value but never used.","Expected '===' and instead saw '=='.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'TimerButtons' is assigned a value but never used.","'useEffect' is defined but never used.",{"desc":"89","fix":"90"},"Update the dependencies array to be: [currentPageIndex, pageSwitcher]",{"range":"91","text":"92"},[1044,1058],"[currentPageIndex, pageSwitcher]"]